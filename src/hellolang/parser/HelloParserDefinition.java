package hellolang.parser;

import com.intellij.lang.ASTNode;
import com.intellij.lang.Language;
import com.intellij.lang.ParserDefinition;
import com.intellij.lang.PsiParser;
import com.intellij.lexer.Lexer;
import com.intellij.openapi.project.Project;
import com.intellij.psi.FileViewProvider;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiFile;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.tree.IFileElementType;
import com.intellij.psi.tree.TokenSet;
import hellolang.HelloFile;
import hellolang.HelloLanguage;
import hellolang.lexer.HelloLexer;
import hellolang.lexer.HelloTokenType;
import hellolang.psi.*;
import org.jetbrains.annotations.NotNull;

public class HelloParserDefinition implements ParserDefinition {
    /**
     * The type of file this parser can parse
     */
    public static final IFileElementType FILE = new IFileElementType(Language.findInstance(HelloLanguage.class));

    @NotNull
    @Override
    public Lexer createLexer(Project project) {
        return new HelloLexer();
    }

    /**
     * Create a PsiParser, which converts a series of tokens into a tree
     *
     * @param project
     * @return
     */
    @Override
    public PsiParser createParser(Project project) {
        return new HelloPsiParser();
    }

    @Override
    public IFileElementType getFileNodeType() {
        return FILE;
    }

    @NotNull
    @Override
    public TokenSet getWhitespaceTokens() {
        return HelloTokenType.WHITE_SPACE_TYPES;
    }

    @NotNull
    @Override
    public TokenSet getCommentTokens() {
        return HelloTokenType.COMMENT_TYPES;
    }

    @NotNull
    @Override
    public TokenSet getStringLiteralElements() {
        return HelloTokenType.STRING_TYPES;
    }

    /**
     * Convert an ASTNode (generated by HelloPsiParser) into a PsiElement.
     *
     * ASTNode is just a hierarchy that has been imposed on a sequence of tokens, PsiElement is more
     * similar to an abstract syntax tree (see HelloPsiParser).
     *
     * This function just translates the HelloExpressionType.Type enum into a bunch of wrapper classes
     *
     * @param node
     * @return
     */
    @NotNull
    @Override
    public PsiElement createElement(ASTNode node) {
        IElementType type = node.getElementType();

        if (type instanceof HelloExpressionType) {
            switch (((HelloExpressionType) type).type) {
                case LET:
                    return new LetExpression(node);
                case LET_VALUE:
                    return new LetValueExpression(node);
                case SCOPE:
                    return new ScopeExpression(node);
                case SYMBOL_DEFINITION:
                    return new SymbolDefinitionExpression(node);
                case SYMBOL_REFERENCE:
                    return new SymbolReferenceExpression(node);
                case STRING:
                    return new StringExpression(node);
            }
        }

        throw new RuntimeException("Don't know what to do with node " + node);
    }

    @Override
    public PsiFile createFile(FileViewProvider viewProvider) {
        return new HelloFile(viewProvider);
    }

    @Override
    public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode astNode, ASTNode astNode2) {
        return SpaceRequirements.MAY;
    }
}
